---
import type { Language } from '../lib/i18n';
import { t, languages, getOppositeLanguage, addLanguageToUrl, removeLanguageFromUrl } from '../lib/i18n';

interface Props {
  currentLanguage: Language;
  currentPath?: string;
}

const { currentLanguage, currentPath = '/' } = Astro.props;
const otherLanguage = getOppositeLanguage(currentLanguage);

// Build URLs for language switching
const cleanPath = removeLanguageFromUrl(currentPath);

// Build URLs for both languages
const spanishUrl = cleanPath; // Spanish is default, no prefix
const englishUrl = `/en${cleanPath}`;
---

<div class="relative inline-block">
  <!-- Current Language Button -->
  <button
    type="button"
    class="inline-flex items-center px-3 py-2 text-sm font-medium text-zinc-300 hover:text-white bg-zinc-800/50 hover:bg-zinc-700/50 rounded-lg border border-zinc-700/50 hover:border-zinc-600/50 transition-all duration-200 group"
    id="language-switcher-button"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <!-- Language Icon -->
    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    
    <!-- Current Language Display -->
    <span class="uppercase font-semibold tracking-wide">
      {currentLanguage}
    </span>
    
    <!-- Dropdown Arrow -->
    <svg class="w-3 h-3 ml-1 transform group-hover:scale-110 transition-transform duration-200" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
    </svg>
  </button>

  <!-- Dropdown Menu -->
  <div
    class="absolute right-0 top-full mt-2 w-48 bg-zinc-800 border border-zinc-700 rounded-lg shadow-xl opacity-0 invisible transform scale-95 transition-all duration-200 z-50"
    id="language-dropdown"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-switcher-button"
  >
    <div class="py-1">
      <!-- Spanish Option -->
      <a
        href={spanishUrl}
        class={`flex items-center px-4 py-3 text-sm transition-colors duration-200 ${
          currentLanguage === 'es' 
            ? 'text-blue-400 bg-blue-500/10' 
            : 'text-zinc-300 hover:text-white hover:bg-zinc-700/50'
        }`}
        role="menuitem"
      >
        <span class="w-6 h-4 mr-3 bg-red-500 rounded-sm flex items-center justify-center relative overflow-hidden">
          <!-- Spanish Flag Simplified -->
          <div class="absolute inset-0 bg-red-500"></div>
          <div class="absolute inset-y-1/4 inset-x-0 bg-yellow-400"></div>
        </span>
        <div class="flex-1">
          <div class="font-medium">{t('language.spanish', {}, 'es')}</div>
          <div class="text-xs text-zinc-500">Espa√±ol</div>
        </div>
        {currentLanguage === 'es' && (
          <svg class="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
        )}
      </a>

      <!-- English Option -->
      <a
        href={englishUrl}
        class={`flex items-center px-4 py-3 text-sm transition-colors duration-200 ${
          currentLanguage === 'en' 
            ? 'text-blue-400 bg-blue-500/10' 
            : 'text-zinc-300 hover:text-white hover:bg-zinc-700/50'
        }`}
        role="menuitem"
      >
        <span class="w-6 h-4 mr-3 bg-blue-700 rounded-sm flex items-center justify-center relative overflow-hidden">
          <!-- US Flag Simplified -->
          <div class="absolute inset-0 bg-blue-700"></div>
          <div class="absolute top-0 left-0 w-2/5 h-2/5 bg-blue-800 flex items-center justify-center">
            <div class="w-1 h-1 bg-white rounded-full"></div>
          </div>
          <div class="absolute inset-x-0 top-1/3 h-px bg-red-500"></div>
          <div class="absolute inset-x-0 top-2/3 h-px bg-red-500"></div>
          <div class="absolute inset-x-0 bottom-0 h-px bg-red-500"></div>
        </span>
        <div class="flex-1">
          <div class="font-medium">{t('language.english', {}, 'en')}</div>
          <div class="text-xs text-zinc-500">English</div>
        </div>
        {currentLanguage === 'en' && (
          <svg class="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
        )}
      </a>
    </div>
  </div>
</div>

<script>
  // Language switcher functionality
  function initLanguageSwitcher() {
    const button = document.getElementById('language-switcher-button');
    const dropdown = document.getElementById('language-dropdown');
    
    if (!button || !dropdown) return;
    
    let isOpen = false;
    
    function toggleDropdown() {
      isOpen = !isOpen;
      
      if (isOpen) {
        dropdown.classList.remove('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.add('opacity-100', 'visible', 'scale-100');
        button.setAttribute('aria-expanded', 'true');
      } else {
        dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
        button.setAttribute('aria-expanded', 'false');
      }
    }
    
    function closeDropdown() {
      if (isOpen) {
        toggleDropdown();
      }
    }
    
    // Toggle on button click
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
    
    // Close on outside click
    document.addEventListener('click', (e) => {
      if (!button.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
        closeDropdown();
      }
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });
    
    // Handle keyboard navigation
    dropdown.addEventListener('keydown', (e) => {
      const menuItems = dropdown.querySelectorAll('[role="menuitem"]');
      const currentIndex = Array.from(menuItems).findIndex(item => 
        item === document.activeElement
      );
      
      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          const nextIndex = currentIndex < menuItems.length - 1 ? currentIndex + 1 : 0;
          (menuItems[nextIndex] as HTMLElement).focus();
          break;
        case 'ArrowUp':
          e.preventDefault();
          const prevIndex = currentIndex > 0 ? currentIndex - 1 : menuItems.length - 1;
          (menuItems[prevIndex] as HTMLElement).focus();
          break;
        case 'Enter':
        case ' ':
          e.preventDefault();
          (document.activeElement as HTMLElement).click();
          break;
      }
    });
  }
  
  // Initialize on DOM load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSwitcher);
  } else {
    initLanguageSwitcher();
  }
  
  // Re-initialize on view transitions
  document.addEventListener('astro:page-load', initLanguageSwitcher);
</script>

<style>
  /* Ensure dropdown appears above other elements */
  #language-dropdown {
    z-index: 9999;
  }
  
  /* Smooth transitions for better UX */
  #language-switcher-button {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Focus styles for accessibility */
  #language-switcher-button:focus,
  [role="menuitem"]:focus {
    outline: 2px solid rgb(96 165 250);
    outline-offset: 2px;
  }
</style>
